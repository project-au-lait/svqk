<%
function w(num) {
  return " ".repeat(num);
}

function getImpDcl(type) {
  const from = type === "frontend" ? "$lib/arch/api/Api": "@api/Api" ;
  const model = `${entityNmPascal}Model`;
  const idModel = compIdFields ? `, ${entityNmPascal}idModel` : "";
  return `import type { ${model}${idModel} } from "${from}";`;
}

function getImpDclIdType(type) {
  const from = type === "frontend" ? "$lib/arch/api/Api": "@api/Api" ;
  return compIdFields ? `import type { ${entityNmPascal}idModel } from "${from}";` : "";
}

tscom = {
  idType: compIdFields ? entityNmPascal + "idModel" : (idField.javaType === "Integer" ? "number" : "string"),
  idObj: compIdFields ? `id: {} as ${entityNmPascal}idModel` : "",
  nonIdFields: fields.filter((field) => !field.id),
  impDclF:  getImpDcl("frontend"),
  impDclE2e: getImpDcl("e2etest"),
  impDclIdTypeF:  getImpDclIdType("frontend"),
  impDclIdTypeE2e: getImpDclIdType("e2etest"),

  fieldToProp: function(field, num = 6) {
    const fieldType = field.javaType;
    const t = w(num);
    let fieldToProp = `${t}${field.fieldName}: `;

    if (fieldType === "String") {
      fieldToProp += `StringUtils.generateRandomString()`;
    } else if (fieldType === "Integer") {
      fieldToProp += `NumberUtils.generateRandomNumber()`;
    } else if (fieldType === "java.time.LocalDate") {
      fieldToProp += `DateUtils.generateRandomLocalDate()`;
    } else if (fieldType === "java.time.LocalDateTime") {
      fieldToProp += `DateUtils.generateRandomLocalDateTime()`;
    } else if (fieldType === "Boolean") {
      fieldToProp += `BooleanUtils.generateRandomBoolean()`;
    } else {
      console.log(`Skip to generate for field type: ${fieldType}`);
      return;
    }
    return fieldToProp;
  },

  fieldsToProps: function(fields, num = 6) {
    return fields
      .map((field) => this.fieldToProp(field, num))
      .filter((property) => property)
      .join(",\n");
  },

  dataType: function(javaType) {
    const typeMap = {
      'Integer': 'number',
      'String': 'string',
      'java.time.LocalDate': 'date',
      'java.time.LocalDateTime': 'date',
      'Boolean': 'boolean'
    };
    return typeMap[javaType] || 'string';
  },

  inputField: function(field, isId) {
    const fieldBinding = isId ? `bind:value={${entityNmCamel}.id.${field.fieldName}}` : `bind:value={${entityNmCamel}.${field.fieldName}}`;
    const label = `{$t('msg.label.${entityNmCamel}.${field.fieldName}')}`;

    if (field.javaType === 'Integer') {
      return `<InputField type='number' id='${field.fieldName}' label=${label} ${fieldBinding} />`;
    } else if (field.javaType === 'String') {
      if (field.stringLength && field.stringLength <= 128) {
        return `<InputField id='${field.fieldName}' label=${label} ${fieldBinding} />`;
      } else {
        return `<TextArea id='${field.fieldName}' label=${label} ${fieldBinding} />`;
      }
    } else if (field.javaType === 'java.time.LocalDate') {
      return `<InputField type='date' id='${field.fieldName}' label=${label} ${fieldBinding} />`;
    } else if (field.javaType === 'java.time.LocalDateTime') {
      return `<InputField type='datetime-local' id='${field.fieldName}' label=${label} />`;
    } else if (field.javaType === 'Boolean') {
      return `<CheckBox id='${field.fieldName}' label=${label} bind:checked={${entityNmCamel}.${field.fieldName}} />`;
    } else {
      const multiple = field.multiple ? 'multiple' : '';
      return `<SelectBox id='${field.fieldName}' label=${label} ${fieldBinding} options={[]} ${multiple} />`;
    }
  },
}

tscom.idProperty = compIdFields
      ? `id: {\n${tscom.fieldsToProps(compIdFields, 8)}\n${w(6)}},`
      : "";

%>