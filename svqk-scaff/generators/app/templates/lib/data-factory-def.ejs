<%# args: (fields: Field[], compIdFields?: Field[]) %>
<%
javaTypeDefs = [
  {
    type: "Integer",
    valueCode: "new Random().nextInt()",
    imports: ["java.util.Random"],
  },
  {
    type: "String",
    valueCode: "RandomStringUtils.randomAscii(@varchar.size@)",
    imports: ["org.apache.commons.lang3.RandomStringUtils"],
  },
];

findTypeDef = (type) => javaTypeDefs.find((typeDef) => typeDef.type === type);

getValueCode = (field) => {
  let code = findTypeDef(field.javaType)?.valueCode ?? "null";

  if(field.javaType === "String"){
    code = code.replace("@varchar.size@", Math.min(field.dbTypeSize, 36));
  }

  return code;
}

imports = [
  ...new Set(fields.concat(compIdFields ?? []).map((field) => field.javaType)),
].reduce((result, type) => result.concat(findTypeDef(type)?.imports ?? []), []);
%>