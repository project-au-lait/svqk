<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <!-- The Basics -->
  <artifactId>svqk-e2etest</artifactId>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>svqk-backend</artifactId>
      <version>${project.version}</version>
    </dependency>
  </dependencies>

  <parent>
    <groupId>dev.aulait.svqk</groupId>
    <artifactId>svqk</artifactId>
    <version>0.10-SNAPSHOT</version>
    <relativePath>../</relativePath>
  </parent>

  <properties>
    <playwright.test.args>--timeout 30000</playwright.test.args>
    <container.image>
      ${image.registry}/${project.parent.artifactId}/${project.parent.artifactId}-backend:${project.version}</container.image>
    <sonar.sources>tests/</sonar.sources>
    <sonar.exclusions>tests/api/Api.ts</sonar.exclusions>
  </properties>


  <!-- Build -->
  <build>
    <resources>
      <resource>
        <directory>resources</directory>
        <includes>
          <include>.env</include>
        </includes>
        <filtering>true</filtering>
        <targetPath>../../</targetPath>
      </resource>
      <resource>
        <directory>../svqk-frontend/src/lib/translations</directory>
        <includes>
          <include>*.json</include>
        </includes>
        <targetPath>../../tests/translations</targetPath>
      </resource>
    </resources>

    <plugins>

      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <configuration>
              <target>
                <replace file="${basedir}/.env" token="[user-timezone]" value="${user.timezone}" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-plugin-version}</version>
        <executions>
          <execution>
            <?m2e ignore?>
            <id>start-backend</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <commandlineArgs>compose up -d --wait</commandlineArgs>
            </configuration>
          </execution>
          <execution>
            <?m2e ignore?>
            <id>pnpm-integration-test</id>
            <phase>integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>pnpm</executable>
              <commandlineArgs>e2etest ${playwright.test.args}</commandlineArgs>
              <environmentVariables>
                <BACKEND_BASE_URL>http://localhost:${backend.port}</BACKEND_BASE_URL>
                <CI>true</CI>
              </environmentVariables>
              <successCodes>
                <successCode>0</successCode>
                <successCode>1</successCode>
              </successCodes>
            </configuration>
          </execution>
          <execution>
            <?m2e ignore?>
            <id>transform-report</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>pnpm</executable>
              <commandlineArgs>transform-report</commandlineArgs>
            </configuration>
          </execution>
          <execution>
            <?m2e ignore?>
            <id>stop-backend</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>docker</executable>
              <commandlineArgs>compose down</commandlineArgs>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${surefire-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>setup</id>

      <activation>
        <property>
          <name>setup</name>
        </property>
      </activation>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin-version}</version>
            <configuration>
              <executable>pnpm</executable>
            </configuration>
            <executions>
              <execution>
                <?m2e ignore?>
                <id>pnpm-install</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <commandlineArgs>install</commandlineArgs>
                </configuration>
              </execution>
              <execution>
                <?m2e ignore?>
                <id>pnpm-playwright-install</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <commandlineArgs>playwright-install</commandlineArgs>
                </configuration>
              </execution>
              <execution>
                <id>pnpm-paraglide-generate</id>
                <phase>generate-sources</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <commandlineArgs>run generate:i18n</commandlineArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>browse-e2etest</id>

      <properties>
        <playwright.test.args>--headed</playwright.test.args>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin-version}</version>
            <executions>
              <execution>
                <?m2e ignore?>
                <id>show-report</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>pnpm</executable>
                  <commandlineArgs>playwright-show-report</commandlineArgs>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>analyze</id>

      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>exec-maven-plugin</artifactId>
            <version>${exec-plugin-version}</version>
            <executions>
              <execution>
                <?m2e ignore?>
                <id>start-backend</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <async>true</async>
                  <executable>java</executable>
                  <commandlineArgs>
                    -jar
                    ${project.parent.basedir}/${project.parent.artifactId}-backend/target/${project.parent.artifactId}-backend-${project.version}-runner.jar
                  </commandlineArgs>
                  <environmentVariables>
                    <QUARKUS_LOG_CONSOLE_ENABLE>false</QUARKUS_LOG_CONSOLE_ENABLE>
                    <QUARKUS_LOG_FILE_ENABLE>true</QUARKUS_LOG_FILE_ENABLE>
                    <QUARKUS_LOG_FILE_PATH>${project.build.directory}/quarkus.log</QUARKUS_LOG_FILE_PATH>
                    <QUARKUS_HIBERNATE_ORM_LOG_BIND_PARAMETERS>false</QUARKUS_HIBERNATE_ORM_LOG_BIND_PARAMETERS>
                    <QUARKUS_HIBERNATE_ORM_LOG_SQL>false</QUARKUS_HIBERNATE_ORM_LOG_SQL>
                  </environmentVariables>
                </configuration>
              </execution>
              <execution>
                <?m2e ignore?>
                <id>wait-backend</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>exec</goal>
                </goals>
                <configuration>
                  <executable>docker</executable>
                  <commandlineArgs>
                    run --rm jwilder/dockerize
                    dockerize -wait http://host.docker.internal:${backend.port} -timeout 60s
                  </commandlineArgs>
                </configuration>
              </execution>
              <execution>
                <?m2e ignore?>
                <id>stop-backend</id>
                <phase>post-integration-test</phase>
                <configuration>
                  <skip>true</skip>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

</project>