:project_root: ../../../../../../../../
==== 初期化処理

初期化処理は、当該画面への遷移イベントが発生してから画面が表示されるまでに実行される処理です。
一覧画面の初期化処理では以下の処理が実行されます。

* *検索* +
  デフォルトの検索条件でBackendから検索結果を取得します。
* *画面要素の描画*

一覧画面の初期化処理のシーケンスは以下の通りです。

.画面初期表示時の処理シーケンス
[cols="3,2",frame=none,grid=none]
|===
a|
[plantuml]
----
include::init-process.pu[]
----

a|[.description]
. ユーザーが一覧画面に遷移します。
. PageLoaderのload functionが呼び出されます。
. PageLoaderが空の検索条件で検索Web APIを呼び出します。取得した結果はmodelとしてPageに返却します。
. ControllerがFactroyを使用して検索条件をDTOからVoに変換します。
. ControllerがServiceを呼び出します。
. ServiceがSearchUtilsを呼び出します。
. SearchUtilsがDBに対しSELECTを実行して検索結果件数を取得します。
. 検索結果件数が0より大きい場合、SearchUtilsがDBに対しSELECTを実行して検索結果を取得します。
. ControllerがFactoryを使用して検索結果をVoからDTOに変換します。
|===


===== Backend

====== Service

xref:../arch-desc/index.adoc#_service[アーキテクチャ記述] に従いServiceのjavaファイルを作成/更新します。

.{project-artifactid}-back/src/main/java/dev/aulait/svqk/domain/issue/IssueService.java
[source,java]
----
include::{project_root}/svqk-back/src/main/java/dev/aulait/svqk/domain/issue/IssueService.java[lines="1..17,33..37"]
----

<.> 検索を行うメソッドを定義します。引数には検索条件Voを、戻り値には検索結果Voを指定します。
<.> 検索処理を行う `SearchUtils.search` メソッドの呼び出しを実装します。

====== DTO

xref:../arch-desc/index.adoc#_dto[アーキテクチャ記述] に従いDTOのjavaファイルを作成/更新します。

.{project-artifactid}-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueSearchCriteriaDto.java
[source,java]
----
include::{project_root}/svqk-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueSearchCriteriaDto.java[]
----

<.> `@EqualsAndHashCode` を設定します。
<.> 共通基底検索条件DTOを継承します。
<.> 検索条件として使用する項目をフィールドとして定義します。

====== Factory

検索条件のDTOからVoを構築するFactoryのjavaファイルを作成/更新します。

.{project-artifactid}-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueFactory.java
[source,java]
----
include::{project_root}/svqk-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueFactory.java[lines="1..46,62..66"]
----

<.> 検索結果EntityからDTOへのマッピング設定を定義します。上記の例ではIssueEntityからIssueDtoへのマッピングにおいてIssueDto.journalsのマッピングを除外しています。
<.> 検索条件DTOからVoを構築するメソッドを定義します。
<.> `SearchConditionBuilder` に検索対象のEntityや検索条件DTOの項目を使用した抽出条件を設定します。
<.> `SearchConditionBuilder` への設定結果を元に検索条件Voを構築して返却します。
<.> 検索結果VoからDTOを構築するメソッドを定義します。
<.> マッピング設定を使用して検索結果VoからDTOを構築して返却します。

====== Controller

xref:../arch-desc/index.adoc#_conttoller[アーキテクチャ記述] に従いControllerのjavaファイルを作成/更新します。

.{project-artifactid}-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueController.java
[source,java]
----
include::{project_root}/svqk-back/src/main/java/dev/aulait/svqk/interfaces/issue/IssueController.java[lines="1..26s,31..34,63..73"]
}
----

<.> 検索結果を格納するDTOの型を定義します。共通基底検索結果DTOを継承し、型パラメーターには検索結果1件の表すDTOを指定します。
<.> 検索メソッドを定義します。引数には検索条件DTOを、戻り値には検索結果DTOを指定します。また、 `@POST` 、`@Path` を設定します。
<.> メソッド内部に以下の処理を実装します。
.. `IssueFactory` を使用して検索条件をDTOからVOへ変換
.. Serviceを使用して検索を実行
.. `SearchResultFactory` を使用して検索結果をVOからDTOに変換
.. DTOをレスポンスとして返却

include::../snippet/backend-verification.ad[]

===== Frontend

include::../snippet/frontend-verification.ad[]

====== API Client

VSCode Task: `gen-api-client` を実行し、API Clientを生成します。
生成されたAPI Clientは {project-artifactId}-frontend/src/lib/arch/api/Api.ts ファイルに出力されます。

.{project-artifactId}-frontend/src/lib/arch/api/Api.ts
[source,ts]
----
include::{project_root}/svqk-frontend/src/lib/arch/api/Api.ts[lines="34..52,92..110,392,343,425..440"]
  };
}
----

====== PageLoader

xref:../arch-desc/index.adoc#_pageloader[アーキテクチャ記述] に従いPageLoaderのtsファイルを作成/更新します。

.{project-artifactId}-frontend/src/routes/issues/+page.ts
[source,ts]
----
include::{project_root}/svqk-frontend/src/routes/issues/+page.ts[]
----

<.> 検索条件を格納するModelを定義します。
<.> `ApiHandler.handle` 関数を使用して検索Web APIの呼び出しを実装します。

====== Page

xref:../arch-desc/index.adoc#_page[アーキテクチャ記述] に従いPageのsvelteファイルを作成/更新します。

.{project-artifactId}-frontend/src/routes/issues/+page.svelte スクリプトセクション
[source,ts]
----
include::{project_root}/svqk-frontend/src/routes/issues/+page.svelte[lines="2..29"]
  }
----

<.> `FormValidator.createForm` 関数を使用し、formをsubmitするためのオブジェクトを定義します。
<.> 検索結果一覧の各列(ヘッダー名、セル表示内容、ソートキー)を定義します。セル表示内容に独自のマークアップを使用する場合は、マークアップセクションで `#snippet` を定義しそれを指定します。(上記の例ではissueIdAnchorを設定しています)
<.> 画面内の検索イベントをハンドリングする関数を定義します。この時点では空の関数とします。

.{project-artifactId}-frontend/src/routes/issues/+page.svelte マークアップセクション
[source,html]
----
<section>
  <form use:form>  <.>
    <fieldset role="search">  <.>
      <input type="search" bind:value={condition.text} />
      <input type="submit" value="Search" />
    </fieldset>

    :
  </form>
</section>

<section>
  <ListTable {result} {columns} bind:condition {search} />  <.>
</section>

<!-- for ListTable issueId Column -->
{#snippet issueIdAnchor(issue: IssueModel)}
  <a href={`/issues/${issue.id}`}>{issue.id}</a>
{/snippet}
----

<.> 検索条件の入力項目を配置するための `form` タグを配置します。 `form` タグにはスクリプトセクションで生成した `form` オブジェクトを設定します。
<.> 検索条件の入力項目を配置します。
<.> 共通UICpomonentを使用して検索結果一覧を配置します。
