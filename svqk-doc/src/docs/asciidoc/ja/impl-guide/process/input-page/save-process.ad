:project_root: ../../../../../../../../
==== 登録処理

登録画面の登録時の処理シーケンスは以下の通りです。

[cols="3,2",frame=none,grid=none]
|===
a|
[plantuml]
----
include::input-page-save.pu[]
----

a|[.description]
. ユーザーが登録操作を実行します。
. PageがWeb APIを呼び出します。
. ControlelrがPOSTされたdtoをentityに変換します。
. ControllerがServiceを呼び出します。
. ServiceがRepositoryを呼び出します。
. Repositoryがentityの状態に応じてINSERTまたはUPDATEを実行します。
. Repositoryがentityを返却します。
. Serviceがentityを返却します。
. Controllerがentityのidとversionプロパティを返却します。
|===


===== DB

include::../snippet/db-migration.ad[]

===== Backend

====== Entity

include::../snippet/entity-generation.ad[]

jeg設定ファイルを更新したらVSCode Task: `gen-entity` を実行し、entityプロジェクト以下にEntityのjavaファイルが生成されていることを確認します。

.{project-artifactid}-entity/src/main/java/dev/aulait/svqk/domain/issue/IssueEntity.java
[source,java]
----
include::{project_root}/svqk-entity/src/main/java/dev/aulait/svqk/domain/issue/IssueEntity.java[]
----

====== Repository

xref:../arch-desc/index.adoc#_repository[アーキテクチャ記述] に従いRepositoryのjavaファイルを作成/更新します。

.{project-artifactid}-backend/src/main/java/dev/aulait/svqk/domain/issue/IssueRepository.java
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/domain/issue/IssueRepository.java[lines="1..10"]
}
----

====== Service

xref:../arch-desc/index.adoc#_service[アーキテクチャ記述] に従いServiceのjavaファイルを作成/更新します。

.{project-artifactid}-backend/src/main/java/dev/aulait/svqk/domain/issue/IssueService.java
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/domain/issue/IssueService.java[lines="1..2,12..16,20..24"]
}
----

<.> EntityをDBに保存するメソッドを定義します。メソッドには `@Transactional` を設定します。 
<.> EntityをDBに保存するRepositoryのメソッドの呼び出しを実装します。上記の `save` は `IssueRepository` が継承する `JpaRepository` のメソッドで、 指定されたEntityを`issue` テーブルにINSERTします。


====== DTO

xref:../arch-desc/index.adoc#_dto[アーキテクチャ記述] に従いDTOのjavaファイルを作成/更新します。

.{project-artifactid}-backend/src/main/java/dev/aulait/svqk/interfaces/issue/IssueDto.java
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/interfaces/issue/IssueDto.java[]
----

====== Controller

xref:../arch-desc/index.adoc#_controller[アーキテクチャ記述] に従いControllerのjavaファイルを作成/更新します。

.{project-artifactid}-backend/src/main/java/dev/aulait/svqk/interfaces/issue/IssueController.java
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/interfaces/issue/IssueController.java[lines="1..2,18..23,36..44"]
}
----

<.> 画面の入力値を保存するWeb APIのエンドポイントとなるメソッドを定義します。メソッドには`@POST` を設定します。
<.> メソッド内部に以下の処理を実装します。
.. `BeanUtils` を使用してDTOからEntityへ変換
..  Serviceを使用してEntityをDBへ保存
.. `BeanUtils` を使用して保存後のEntityを DTOに変換
.. DTOをレスポンスとして返却

include::../snippet/backend-verification.ad[]

===== Frontend

API Clientを生成し、Web APIの呼び出し処理を追加します。

include::../snippet/frontend-verification.ad[]

====== API Client

VSCode Task: `gen-api-client` を実行し、API Clientを生成します。
生成されたAPI Clientは {project-artifactId}-frontend/src/lib/arch/api/Api.ts ファイルに出力されます。

====== UIComponent


.{project-artifactId}-frontend/src/lib/domain/issue/IssueForm.svelte スクリプトセクション
[source,ts]
----
  ...
  import type { IssueModel, IssueStatusModel } from '$lib/arch/api/Api';
  import ApiHandler from '$lib/arch/api/ApiHandler';
  import { messageStore } from '$lib/arch/global/MessageStore';

  interface Props {
    issue: IssueModel; // <.>
    handleAfterSave: (id?: number) => Promise<void>;
    actionBtnLabel: string;
  }

  ...

  async function save() {
    // <.>
    const response = await ApiHandler.handle<IdModel>(fetch, (api) =>
      api.issues.issuesCreate(issue)
    );

    // <.>
    if (response) {
      await handleAfterSave(response.id);
      messageStore.show($t('msg.saved'));
    }
  }
----

<.> 入力項目の入力値を格納するオブジェクトにModelの型を定義します。
<.> `ApiHandler.handle` 関数を使用して画面の入力値を保存するWeb APIを呼び出します。
<.> `ApiHandler.handle` 関数の戻り値でエラー判定をします。エラーでない場合にメッセージ以下の処理を行います。
** UIComponent外部のcallback関数の実行
** グローバルメッセージの表示

====== Page

.src/routes/issues/new/+page.svelte スクリプトセクション
[source,ts]
----
  import type { IssueModel, IssueStatusModel } from '$lib/arch/api/Api';

  let issue = $state({
    issueStatus: {} as IssueStatusModel,
    tracker: {} as TrackerModel
  } as IssueModel); // <.>
----

<.> 入力項目の入力値を格納するオブジェクトにModelの型を定義します。
    プロパティがオブジェクトの場合そのプロパティにもModelの型を定義します。
