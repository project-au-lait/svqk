:project_root: ../../../../../../../../
==== 初期化処理

初期化処理は、当該画面への遷移イベントが発生してから画面が表示されるまでに実行される処理です。
登録画面の初期化処理では以下の処理が実行されます。

* *入力項目の初期化* +
  画面表示時の入力項目の値を設定します。
* *入力項目のバリデーションの設定* +
  入力項目にクライアントサイドで行う単項目チェックを設定します。
* *画面要素の描画* +

登録画面の初期化処理のシーケンスは以下の通りです。

.画面初期表示時の処理シーケンス
[cols="1,2",frame=none,grid=none]
|===
a|
[plantuml]
----
include::input-page-init.pu[]
----

a|[.description]
. ユーザーが登録画面に遷移します。
. PageLoaderのload functionが呼び出されます。
. PageLoaderが画面の入力値を格納するmodelのインスタンスを生成します。インスタンスのプロパティには画面要素の初期値を設定します。
. PageがPageLoaderから取得したmodelを元に画面のHTMLを構築します。また入力項目のバリデーションを設定します。
|===

以降では、上記の処理シーケンスの各要素を以下の順に実装します。

. Frontend:  画面要素の配置とバリデーション定義の実装

===== Frontend

登録画面の実装手順では、初めにFrontendの体裁部分を実装します。
また、入力フォームをUIComponentとして実装し、登録画面と更新画面で共通化します。

include::../snippet/frontend-verification.ad[]

====== Page

xref:../arch-desc/index.adoc#_page[アーキテクチャ記述] に従いPageのsvelteファイルを作成/更新します。

.{project-artifactId}-frontend/src/routes/issues/new/+page.svelte スクリプトセクション
[source,ts]
----
  import { goto } from '$app/navigation';
  import { pageStore } from '$lib/arch/global/PageStore';
  import IssueForm from '$lib/domain/issue/IssueForm.svelte';
  import { t } from '$lib/translations';

  const issue = $state({ // <.>
    subject: ''
    // ...
  });

  async function handleAfterSave(id?: number) { // <.>
    await goto(`/issues/${id}`);
  }
----

<.> 入力項目の入力値を格納するオブジェクトを定義します。このオブジェクトのプロパティをマークアップセクションで入力項目にバインドすることで、入力値を格納できます。
<.> 登録処理後のコールバック関数を実装します。

.{project-artifactId}-frontend/src/routes/issues/new/+page.svelte マークアップセクション
[source,html]
----
<IssueForm {issue} {handleAfterSave} actionBtnLabel={$t('msg.register')} /> <.>
----

<.> 入力フォームのUIComponentを配置しプロパティを設定します。

====== UIComponent

UIComponentのsvelteファイルを作成/更新します。

.{project-artifactId}-frontend/src/lib/domain/issue/IssueForm.svelte スクリプトセクション
[source,ts]
----
  import FormValidator from '$lib/arch/form/FormValidator';
  import InputField from '$lib/arch/form/InputField.svelte';
  import { issueStatuses } from '$lib/domain/issue/IssueStatusMasterStore';
  import { t } from '$lib/translations';
  import * as yup from 'yup';

  // <.>
  interface Props {
    issue: IssueModel;
    handleAfterSave: (id?: number) => Promise<void>;
    actionBtnLabel: string;
  }

  // <.>
  let { issue = $bindable(), handleAfterSave, actionBtnLabel }: Props = $props();

  // <.>
  const spec = {
    subject: yup.string().required().label($t('msg.label.issue.subject'))
    // ...
  };

  const form = FormValidator.createForm(spec, save); // <.>

  // <.>
  async function save() {
    console.log('saved')
  }
----

<.> UIComponentが外部から受け取るプロパティの型をinterfaceとして定義します。
<.> 上記interfaceをUIComponentのプロパティとして定義します。
<.> `yup.string()` 等の `yup` が提供する関数を使用して入力フォームのバリデーションの仕様を定義します。
    仕様は、入力項目ごとのプロパティと、プロパティのバリデーションを定義したオブジェクトとして定義します。
    ここでは、 `subject` という名前のstring型の必須入力項目を定義しています。
<.> `FormValidator.createForm` 関数を使用し、バリデーションをhtml要素に適用するためのオブジェクトを定義します。
<.> バリデーションがエラー無しで終了した場合に呼び出される関数を定義します。この時点では動作確認用のログ出力のみを実装します。


.{project-artifactId}-frontend/src/lib/domain/issue/IssueForm.svelte マークアップセクション
[source,html]
----
<form use:form>  <.>
  <div>
    <InputField id="subject" label="Subject" bind:value={issue.subject} />  <.>
  </div>

  ...  

    <div>
      <SelectBox
        id="status"
        label={$t('msg.status')}
        options={$issueStatuses}   <.>
        bind:value={issue.issueStatus.id}
      />
    </div>

  ...  

  <div>
    <button id="save" type="submit">{actionBtnLabel}</button> <.>
  </div>
</form>
----

<.> 入力フォームとなる `form` タグを配置します。 `form` タグにはスクリプトセクションで生成した `form` オブジェクトを設定します。
<.> 入力項目を配置します。上記の例では、チケットの題名を入力するためのテキストボックスを配置しています。
<.> セレクトボックスの選択肢等でマスターデータが必要な場合は、MasterStoreを使用します。MasterStoreは別途 <<master-load,マスターデータロード>> に従い実装しておく必要があります。
<.> 登録処理の起点となる画面要素を配置します。画面要素は `button type="submit"` で実装します。

[NOTE]
====
Frontendサーバー、Backendサーバー、DBを全て起動した状態で画面操作を行い、期待通りの挙動になること、BackendサーバーのログにWeb APIの処理のログ等が出力されることを確認します。
====
