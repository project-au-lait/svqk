==== コンポーネント構成

テストプログラムを構成するコンポーネントとそれらの相互作用を以下の通り定義します。

.テストプログラムのコンポーネント構成
[plantuml]
----
include::e2etest-component-structure.pu[]
----

各コンポーネントが担う責務とコンポーネントを定義する単位を以下の通り定義します。

.コンポーネントの責務と定義単位
[cols="1,3,2,2"]
|===
^|コンポーネント ^|責務 ^|ファイル(クラス)単位 ^| メソッド単位

|Spec
|Facace、PageObjectを使用してテストシナリオを実行します。
|テストシナリオを纏めやすい単位
|テストシナリオごとに1つ


|Facade
|PageObjectを使用して複数の画面に跨った一連の画面操作と期待値の検証を実行します。
|操作対象の画面を纏めやすい単位
|複数のシナリオで再利用すべき一連の操作ごとに1つ


|PageObject
|PageElementを使用して1つの画面内の一連の画面操作と期待値の検証を実行します。
|画面ごとに1つ
|同一画面内の一連の操作ごとに1つ


|PageElement
|BasePageElementが提供するAPIを使用して画面の操作と期待値の検証を実行します。
|画面ごとに1つ
|画面要素 + 操作 / 検証ごとに1つ


|Factory
|テストで使用するModelの生成を行います。
|Modelごとに1つ
|作成するModelに設定するデータのパターンごとに1つ
|===

===== Spec

Specは、テストシナリオの実行を担うコンポーネントです。
Specには、テストシナリオをPlaywrightのテストケースとして実装します。
テストケースには、テストシナリオに沿った画面操作と期待値の検証の処理をFacace・PageObjectを使用して実装します。

.Specの実装
[source,ts]
----
import { test } from '@playwright/test';
import { IssueFacade } from '../facades/IssueFacade';
import { DryRun } from '../arch/DryRun';
import TopPage from '../pages/top/TopPage';
import IssueInputFactory from '../factories/IssueFactory';

// <.>
test('CRUD of Issue', async ({ page }) => {
  // <.>
  const dryRun = DryRun.build();
  const topPage = new TopPage(page, dryRun);

  // <.>
  const menuBar = await topPage.open();
  let issueListPage = await menuBar.gotoIssueListPage();
  let issueInputPage = await issueListPage.gotoNewIssuePage();

  // Create
  const issue = IssueInputFactory.createRandomIssue();
  await issueInputPage.save(issue);

  // Rererence
  const issueFacade = new IssueFacade(dryRun);
  issueInputPage = await issueFacade.referenceIssueBySubject(menuBar, issue.subject);

  // ...
});
----

. Playwrightが提供するtest関数を使用してテストケースを定義します。これが実行可能なテストのエントリーポイントとなります。
. テストシナリオの実行に必要なコンポーネントの初期化を行います。
. Facade、PageObjectを使用してテストシナリオを実装します。上記の例の3行では「トップページを開く、メニューバーを操作してチケット一覧画面へ遷移、チケット一覧画面を操作してチケット登録画面へ遷移」というシナリオを実装しています。

===== Facade

Facadeは、複数の画面に跨った一連の画面操作と期待値の検証を担うコンポーネントです。
Facadeには、これらを行うメソッドをPageObjectを使用して実装します。
メソッドは、開始時点の画面のPageObjectが引数に、終了時点の画面のPageObjectが戻り値となるように実装します。

.Facadeの実装
[source,ts]
----
import BaseFacade from '../arch/BaseFacade';
import MenuBar from '../pages/menu-bar/MenuBar';

export class IssueFacade extends BaseFacade {
  // <.>
  async referenceIssueBySubject(menuBar: MenuBar, subject: string) {
    this.logStart('Issue Reference');

    // <.>
    const issueListPage = await menuBar.gotoIssueListPage();
    await issueListPage.searchIssue({ text: subject });
    const issueInputPage = await issueListPage.gotoIssueBySubject(subject);

    // <.>
    return issueInputPage;
  }
}
----

. Facadeのメソッドは以下を引数に持ちます。
** Facadeが行う画面操作の起点となる画面のPageObject
** Facadeが行う画面操作で使用するパラメーター
. PageObjectを使用してFacadeが行う画面操作を実装します。
. 終了時点の画面のPageObjectをメソッドの戻り値として返却します。

===== PageObject

PageObjectは、画面内の一連の画面操作と期待値の検証を担うコンポーネントです。
PageObjectには、これらを行うメソッドをPageElementを使用して実装します。

.PageObjectの実装
[source,ts]
----
import IssueInputPageElement from './IssueInputPageElement';
import type { IssueModel } from '../../api/Api';
import BasePageElement from '../../arch/BasePageElement';

export default class IssueInputPage {
  private issueInputPageEl: IssueInputPageElement;

  constructor(page: BasePageElement) {
    // <.>
    this.issueInputPageEl = new IssueInputPageElement(page);
  }

  // <.>
  async save(issue: IssueModel) {
    // <.>
    await this.issueInputPageEl.inputSubject(issue.subject);
    await this.issueInputPageEl.inputDescription(issue.description!);

    await this.issueInputPageEl.clickSaveBtn();
  }

  // <.>
  async expectIssue(issue: IssueModel) {
    await this.issueInputPageEl.expectSubject(issue.subject);
    await this.issueInputPageEl.expectDescription(issue.description);
  }
}
----

. 画面操作を行うメソッドを定義します。上記の例では、「引数に指定された `issue` を保存する操作を行う」メソッドを定義しています。
. PageElementを使用して一連の画面操作を実装します。
. 期待値の検証を行うメソッドを定義します。上記の例では、「引数に指定された `issue` と画面の状態が一致するかを検証する」メソッドを定義しています。


===== PageElement

PageElementは、画面要素に対する操作と期待値の検証を担うコンポーネントです。
PageElemntには、これらを行うメソッドをBasePageElementを使用して実装します。

.PageElementの実装
[source,ts]
----
import BasePageElement from '../../arch/BasePageElement';

// <.>
export default class IssueInputPageElement extends BasePageElement {
  get pageNameKey() {
    return 'newIssue';
  }

  // <.>
  async inputSubject(subject: string) {
    // <.>
    await this.inputText('#subject', subject);
  }

  // <.>
  async expectSubject(subject: string) {
    await this.expectText('#subject', subject);
  }

}
----

. PageElementの共通基底クラスであるBasePageElementを継承します。これにより開発者はPlaywrightのAPIを意識せずにPageElementを実装できます。
. 1つの画面項目に対する操作を1メソッドとして定義します。上記の例では「 `題名` 項目に引数で指定された文字列を入力する」メソッドを定義しています。
. BasePageElementが提供するAPIを使用して画面要素に対する操作を実装します。上記の例では、「ロケーター `#subject` で指定される画面要素に対し、引数で指定された文字列を入力する」という操作を実装しています。
. 1つの画面項目に対する期待値の検証を1メソッドとして定義します。

===== Factory

Factoryは、テストで使用するModelの生成を担うコンポーネントです。

.Factoryの実装
[source,ts]
----
import type { IssueModel, IssueStatusModel } from '../api/Api';
import StringUtils from '../arch/StringUtils';

export default class IssueFactory {
  static create() {
    const issue = { issueStatus: {} as IssueStatusModel } as IssueModel;
    return issue;
  }

  // <.>
  static createRandomIssue() {
    const issue = this.create();
    issue.subject = StringUtils.generateRandomString();
    issue.description = `${issue.subject}の説明`;

    return issue;
  }
}
----

. テストに使用するModelを生成するメソッドを実装します。上記の例では `題名`、`説明`にランダムな文字列を持つ `issue` Modelを生成しています。
