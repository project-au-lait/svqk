:project_root: ../../../../../../../
==== コンポーネント構造

テストプログラムを構成するコンポーネントとそれらの相互作用を以下の通り定義します。

.テストプログラムのコンポーネント構造
[plantuml]
----
include::e2etest-component-structure.pu[]
----

各コンポーネントが担う責務とコンポーネントを定義する単位を以下の通り定義します。

.コンポーネントの責務と定義単位
[cols="1,3,2,2"]
|===
^|コンポーネント ^|責務 ^|ファイル(クラス)単位 ^| メソッド単位

|Spec
|Facace、PageObjectを使用してテストシナリオを実行します。
|テストシナリオを纏めやすい単位
|テストシナリオごとに1つ


|Facade
|PageObjectを使用して複数の画面に跨った一連の画面操作と期待値の検証を実行します。
|操作対象の画面を纏めやすい単位
|複数のシナリオで再利用すべき一連の操作ごとに1つ


|PageObject
|PageElementを使用して1つの画面内の一連の画面操作と期待値の検証を実行します。
|画面ごとに1つ
|同一画面内の一連の操作ごとに1つ


|PageElement
|BasePageElementが提供するAPIを使用して画面の操作と期待値の検証を実行します。
|画面ごとに1つ
|画面要素 + 操作 / 検証ごとに1つ


|Factory
|テストで使用するModelの生成を行います。
|Modelごとに1つ
|作成するModelに設定するデータのパターンごとに1つ
|===

===== Spec

Specは、テストシナリオの実行を担うコンポーネントです。
Specには、テストシナリオをPlaywrightのテストケースとして実装します。
テストケースには、テストシナリオに沿った画面操作と期待値の検証の処理をFacace・PageObjectを使用して実装します。

.Specの実装
[source,ts]
----
include::{project_root}/svqk-e2etest/tests/specs/issue.spec.ts[lines="1..32"]
  // ...
});
----

. Playwrightが提供するtest関数を使用してテストケースを定義します。これが実行可能なテストのエントリーポイントとなります。
. テストシナリオの実行に必要なコンポーネントの初期化を行います。
. Facade、PageObjectを使用してテストシナリオを実装します。上記の例では「トップページを開く、メニューバーを操作してチケット一覧画面へ遷移、チケット一覧画面を操作してチケット登録画面へ遷移」というシナリオを実装しています。

===== Facade

Facadeは、複数の画面に跨った一連の画面操作と期待値の検証を担うコンポーネントです。
Facadeには、これらを行うメソッドをPageObjectを使用して実装します。
メソッドは、開始時点の画面のPageObjectが引数に、終了時点の画面のPageObjectが戻り値となるように実装します。

.Facadeの実装
[source,ts]
----
include::{project_root}/svqk-e2etest/tests/facades/IssueFacade.ts[]
----

. Facadeのメソッドは以下を引数に持ちます。
** Facadeが行う画面操作の起点となる画面のPageObject
** Facadeが行う画面操作で使用するパラメーター
. PageObjectを使用してFacadeが行う画面操作を実装します。
. 終了時点の画面のPageObjectをメソッドの戻り値として返却します。

===== PageObject

PageObjectは、画面内の一連の画面操作と期待値の検証を担うコンポーネントです。
PageObjectには、これらを行うメソッドをPageElementを使用して実装します。

.PageObjectの実装
[source,ts]
----
include::{project_root}/svqk-e2etest/tests/pages/issue-input/IssueInputPage.ts[lines="1..17,22..29"]
}
----

. 画面操作を行うメソッドを定義します。上記の例では、「引数に指定された `issue` を保存する操作を行う」メソッドを定義しています。
. PageElementを使用して一連の画面操作を実装します。
. 期待値の検証を行うメソッドを定義します。上記の例では、「引数に指定された `issue` と画面の状態が一致するかを検証する」メソッドを定義しています。


===== PageElement

PageElementは、画面要素に対する操作と期待値の検証を担うコンポーネントです。
PageElemntには、これらを行うメソッドをBasePageElementを使用して実装します。

.PageElementの実装
[source,ts]
----
include::{project_root}/svqk-e2etest/tests/pages/issue-input/IssueInputPageElement.ts[lines="1..14,27..31"]
}
----

. PageElementの共通基底クラスであるBasePageElementを継承します。これにより開発者はPlaywrightのAPIを意識せずにPageElementを実装できます。
. 1つの画面項目に対する操作を1メソッドとして定義します。上記の例では「 `subject` 項目に引数で指定された文字列を入力する」メソッドを定義しています。
. BasePageElementが提供するAPIを使用して画面要素に対する操作を実装します。上記の例では、「ロケーター `#subject` で指定される画面要素に対し、引数で指定された文字列を入力する」という操作を実装しています。
. 1つの画面項目に対する期待値の検証を1メソッドとして定義します。

===== Factory

Factoryは、テストで使用するModelの生成を担うコンポーネントです。

.Factoryの実装
[source,ts]
----
include::{project_root}/svqk-e2etest/tests/factories/IssueFactory.ts[]
----

. テストに使用するModelを生成するメソッドを実装します。上記の例では `subject`、`description`にランダムな文字列を持つ `issue` Modelを生成しています。
