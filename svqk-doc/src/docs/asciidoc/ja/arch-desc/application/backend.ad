:project_root: ../../../../../../../
=== Backend

==== パッケージ構造


[source,txt,subs="attributes"]
----
include::backend-dir-structure.txt[]
----


==== Controller

Controllerは、Web APIのエンドポイントとなるコンポーネントです。クライアントからHTTPリクエストを受け取り、それに対するHTTPレスポンスを返します。Validator、Factory、Serviceの実行順序と入出力を制御することで、Web API内部の処理フローを制御します。
Controllerの実装には、Jakarta RESTを使用します。

.Controllerの実装
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/interfaces/hello/HelloController.java[]
----

<.> `@Path` をControllerクラスに設定します。これにより、このControllerクラスがWeb APIのエンドポイントしてQuarkusに認識されます。
<.> `@RequiredArgsConstructor` をControllerクラスに設定します。これにより、private finalフィールドを引数に持つコンストラクタがコンパイル時に自動生成されます。
<.> Controllerが使用するコンポーネントをprivate finalフィールドとして定義します。このフィールドは、Quarkus起動時に該当するコンポーネントのインスタンスがInjectされます。
<.> Web APIのエンドポイントとなるメソッドを定義します。メソッドにはWeb APIのHTTP Methodを表すアノテーション(`@GET`、`@POST` 等)を設定します。

[NOTE]
====
Controllerの実装で使用可能なJakarta RESTの機能の詳細はQuarkusのガイドを参照してください。

* https://quarkus.io/guides/rest[Writing REST Services with Quarkus REST]
====

==== Service

Serviceは、トランザクション処理を担うコンポーネントです。Repository、Logicの実行順序と入出力を制御することでトランザクション処理のフローを制御します。
Serviceの実装には、JTA、CDIを使用します。

.Serviceの実装
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/domain/hello/HelloService.java[lines="1..14,16..20,22..23"]
----

<.> `@ApplicationScoped` をServiceクラスに設定します。これにより、ServiceクラスのインスタンスがCDI Managed Beanとして使用可能になります。 
<.> `@RequiredArgsConstructor` をServiceクラスに設定します。これにより、private finalフィールドを引数に持つコンストラクタが実装しなくても使用可能になります。
<.> Serviceが使用するコンポーネントをprivate finalフィールドとして定義します。このフィールドはQuarkus起動時に該当するコンポーネントのインスタンスがInjectされます。
<.> トランザクション処理ごとにメソッドを定義します。DBへの書き込みを行う処理のメソッドには `@Transactinal` を設定します。


[NOTE]
====
Quarkusで使用可能なJTAの機能の詳細はQuarkusのドキュメントを参照してください。

* https://quarkus.io/guides/transaction[Using transactions in Quarkus]
====

==== Repository

Repositoryは、DBアクセス、O/Rマッピングを担うコンポーネントです。
Repositoryの実装には、JPA、Spring Data JPAを使用します。

.Repositoryの実装
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/domain/hello/HelloRepository.java[]
----

<.> `JpaRepository` を継承します。型パラメータにはEntityとEntityのIDの型を指定します。

[NOTE]
====
Quarkusで使用可能なJPA、Spring Data JPAの機能の詳細はQuarkusのドキュメントを参照してください。

* https://quarkus.io/guides/spring-data-jpa[Quarkus Extension for Spring Data API]
* https://quarkus.io/guides/spring-data-jpa#supported-spring-data-jpa-functionalities[Quarkus Supported Spring Data JPA functionalities]
====

==== DTO

DTOは、Web APIのリクエスト及びレスポンスを表すオブジェクトです。

.DTOの実装
[source,java]
----
include::{project_root}/svqk-backend/src/main/java/dev/aulait/svqk/interfaces/hello/HelloDto.java[]
----

<.> `@Data` をDTOクラスに設定します。これにより、フィールドのGetter、Setter等が自動生成されます。
<.> リクエスト及びレスポンスのプロパティとなるフィールドを定義します。
** リクエスト及びレスポンスのJSONプロパティに必ず登場させるフィールドに対しては `@Schema(required = true)` を指定します。NOT NULLのカラムの値を格納するフィールド等がこれに該当します。
