[[component-structure]]
=== コンポーネント構造

本システムのFrontend・Backendアプリケーションを構成するコンポーネントとそれらの相互作用を以下の通り定義します。

.コンポーネント構造
[plantuml]
----
include::component-structure.pu[]
----

各コンポーネントが担う責務とコンポーネントを定義する単位を以下の通り定義します。

.コンポーネントの責務と定義単位
[cols="1,2,1"]
|===
^|コンポーネント ^|責務 ^|定義単位

|Page
|画面項目の配置、バリデーションの定義、画面イベントのハンドリング、Web APIの呼び出しを担います。
|画面 (URL)ごとに1つ

|PageLoader
|画面初期化時のWeb APIを使用したデータ取得、入力項目の初期化を担います。
|Pageごとに1つ

|UIComponent
|画面の部品化を担います。
|再利用し易い単位

|Controller
|Web APIのエンドポイントの定義を担います。
|Entityごとに1つ

|Validator
|相関バリデーションを担います。
|Controllerごとに1つ

|Service
|トランザクション制御、トランザクション内の処理フロー制御を担います。
|Entityごとに1つ

|Logic
|Serviceの処理の中で外部リソースへのアクセスが不要な処理を担います。
|Serviceごとに1つ

|Repository
|DBアクセス、O/Rマッピングを担います。
|Entityごとに1つ
|===

コンポーネント間でデータを受け渡すためのオブジェクトを以下の通り定義します。

.データを受け渡すためのオブジェクト
|===
^|オブジェクト ^|表すデータ ^|定義単位

|Model
|FrontendでのWeb APIのリクエスト、レスポンス
|DTOごとに1つ

|DTO
|BackendでのWeb APIのリクエスト、レスポンス
|Entityごとに1つ

|Entity
|DBのレコード
|DBのテーブルごとに1つ
|===


// ==== フロントエンド

// ===== View

// ===== UIComponent

// ===== APIClient

// ==== バックエンド

// ===== Controller

// ===== Factroy

// ===== Validator

// ===== Service

// ===== Logic

// ===== Repository


